{
  "name": "Local Perplexity RAG",
  "nodes": [
    {
      "parameters": {
        "path": "api/search",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "5c0d403b-095f-43ac-87cd-fbc902f38f25",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "webhookId": "89330d77-ccd5-47b0-a359-092ecee9eacd"
    },
    {
      "parameters": {
        "functionCode": "const body = items[0].json;\nbody.maxResults = Math.min(Math.max(body.maxResults ?? 6, 3), 12);\nbody.timeRange = body.timeRange || '30d';\nbody.locale = body.locale || 'en';\nreturn [{ json: body }];"
      },
      "id": "9ae1d71a-7d53-45b4-97d6-79a0a12b3c73",
      "name": "Validate & Defaults",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        208,
        0
      ]
    },
    {
      "parameters": {
        "url": "=http://{{$env.REDIS_HOST}}:{{$env.REDIS_PORT}}/get?q={{$json.query}}",
        "options": {}
      },
      "id": "89b888e9-0df8-4cdb-985c-df8f3a4fb435",
      "name": "Cache Lookup",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        400,
        0
      ]
    },
    {
      "parameters": {
        "authentication": "bearerToken",
        "bearerToken": "={{$env.OPENROUTER_API_KEY}}",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "sendBody": true,
        "bodyContentType": "raw",
        "rawBody": "={\"model\": \"{{$env.OPENROUTER_MODEL}}\", \"temperature\": 0.2, \"messages\": [{\"role\": \"system\", \"content\": \"You are a Search Query Expert. Rewrite the user query into a precise web search string using operators, site: filters when helpful, locale hints, and time constraints. Return ONLY the query string. No explanations.\"}, {\"role\": \"user\", \"content\": \"User query: {{$json.query}}\\\nLocale: {{$json.locale}}\\\nTime range hint: {{$json.timeRange}}\\\nInclude domains: {{($json.includeDomains || []).join(', ')}}\\\nExclude domains: {{($json.excludeDomains || []).join(', ')}}\"}]}",
        "options": {}
      },
      "id": "28b94499-70a7-4f12-ba12-c0558b39154f",
      "name": "Query Normalizer",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        608,
        0
      ]
    },
    {
      "parameters": {
        "url": "https://api.tavily.com/search",
        "sendBody": true,
        "bodyContentType": "raw",
        "rawBody": "={\"api_key\": \"{{$env.TAVILY_API_KEY}}\", \"query\": \"{{$json.normalized_query || $json.query}}\", \"max_results\": {{$json.maxResults}}, \"search_depth\": \"advanced\", \"include_answer\": false, \"include_domains\": {{JSON.stringify($json.includeDomains || [])}}, \"exclude_domains\": {{JSON.stringify($json.excludeDomains || [])}}}",
        "options": {}
      },
      "id": "dd6dfc1b-c519-439e-8e11-b3c69e4c25e2",
      "name": "Search API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        800,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "const inDomains = new Set(($json.includeDomains || []).map(d => d.toLowerCase()));\nconst exDomains = new Set(($json.excludeDomains || []).map(d => d.toLowerCase()));\n\nfunction host(u){ try { return new URL(u).hostname.replace(/^www\\./,'').toLowerCase(); } catch { return ''; } }\n\nlet items = $json.results.map(r => ({\n  url: r.url,\n  title: r.title || '',\n  snippet: r.snippet || '',\n  published: r.published || null,\n  baseScore: r.score ?? 0.5,\n  host: host(r.url)\n}));\n\nitems = items.filter(x => !exDomains.has(x.host));\nitems.forEach(x => { if (inDomains.size && inDomains.has(x.host)) x.baseScore += 0.25; });\n\n// dedup by url path\nconst seen = new Set();\nitems = items.filter(x => { const k = x.host + '|' + new URL(x.url).pathname; if (seen.has(k)) return false; seen.add(k); return true; });\n\n// recency boost\nitems.forEach(x => {\n  if (x.published) {\n    const ageDays = Math.min(365, (Date.now() - Date.parse(x.published)) / 86400000);\n    x.baseScore += (1 - ageDays/365) * 0.2;\n  }\n});\n\nitems.sort((a,b) => b.baseScore - a.baseScore);\nreturn [{ json: { top: items.slice(0, $json.maxResults) } }];"
      },
      "id": "4bfa9c66-b6d9-4c2e-9cce-3a33433188b0",
      "name": "Rank & Deduplicate",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1008,
        0
      ]
    },
    {
      "parameters": {
        "url": "https://api.firecrawl.dev/v1/scrape",
        "sendBody": true,
        "bodyContentType": "raw",
        "rawBody": "={\"url\": \"{{$json.url}}\", \"formats\": [\"markdown\", \"text\"], \"mobile\": false, \"remove\": [\"nav\", \"footer\", \"form\", \"script\"]}",
        "headers": {
          "x-api-key": "={{$env.FIRECRAWL_API_KEY}}"
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "49fb0764-8bde-4141-b78c-8bde91a83682",
      "name": "Fetch & Extract Content",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1200,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "// Clean & Trim function\n// Strip boilerplate, remove nav/ads, collapse whitespace, truncate each doc\n\nconst MAX_CHARS = 10000;\n\nfunction cleanText(text) {\n  if (!text) return '';\n  \n  // Remove excessive whitespace\n  text = text.replace(/\\s+/g, ' ').trim();\n  \n  // Truncate if too long\n  if (text.length > MAX_CHARS) {\n    text = text.substring(0, MAX_CHARS) + '...';\n  }\n  \n  return text;\n}\n\nconst result = {\n  url: $json.url,\n  title: $json.title || '',\n  markdown: cleanText($json.markdown),\n  text: cleanText($json.text),\n  published: $json.published || null\n};\n\nreturn [{ json: result }];"
      },
      "id": "cd75c488-adce-4423-a93d-19ad3a6637b2",
      "name": "Clean & Trim",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1408,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "// Compose Synthesis Prompt\n\nconst docs = [];\n\n// Assuming we have an array of items from previous steps\nconst items = Array.isArray($json) ? $json : [$json];\n\nitems.forEach(item => {\n  if (item.markdown || item.text) {\n    const excerpt = item.markdown ? item.markdown.substring(0, 2000) : item.text.substring(0, 2000);\n    docs.push({\n      url: item.url,\n      title: item.title || '',\n      excerpt: excerpt\n    });\n  }\n});\n\nconst promptData = {\n  query: items[0]?.query || '',\n  docs: docs,\n  styleHints: items[0]?.ui?.mode || 'concise'\n};\n\nreturn [{ json: promptData }];"
      },
      "id": "20095064-6488-46a8-8a2e-954ebd5a1729",
      "name": "Compose Synthesis Prompt",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1600,
        0
      ]
    },
    {
      "parameters": {
        "authentication": "bearerToken",
        "bearerToken": "={{$env.OPENROUTER_API_KEY}}",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "sendBody": true,
        "bodyContentType": "raw",
        "rawBody": "={\"model\": \"{{$env.OPENROUTER_MODEL}}\", \"temperature\": 0.2, \"top_p\": 0.9, \"messages\": [{\"role\": \"system\", \"content\": \"You are a meticulous research assistant. Synthesize the provided web extracts into a concise, accurate answer with explicit citations. Do not speculate. If uncertain, say so. Return STRICT JSON matching the provided JSON Schema. No markdown, no prose.\"}, {\"role\": \"user\", \"content\": \"Schema:\n{\n  \\\"type\\\": \\\"object\\\",\n  \\\"required\\\": [\\\"answer\\\", \\\"bullets\\\", \\\"sources\\\", \\\"diagnostics\\\"],\n  \\\"properties\\\": {\n    \\\"answer\\\": {\\\"type\\\":\\\"string\\\"},\n    \\\"bullets\\\": {\\\"type\\\":\\\"array\\\", \\\"items\\\":{\\\"type\\\":\\\"string\\\"}},\n    \\\"sources\\\": {\n      \\\"type\\\": \\\"array\\\",\n      \\\"items\\\": {\n        \\\"type\\\": \\\"object\\\",\n        \\\"required\\\": [\\\"title\\\",\\\"url\\\",\\\"snippet\\\",\\\"relevance\\\"],\n        \\\"properties\\\": {\n          \\\"title\\\": {\\\"type\\\":\\\"string\\\"},\n          \\\"url\\\": {\\\"type\\\":\\\"string\\\"},\n          \\\"snippet\\\": {\\\"type\\\":\\\"string\\\"},\n          \\\"relevance\\\": {\\\"type\\\":\\\"number\\\"},\n          \\\"published\\\": {\\\"type\\\":\\\"string\\\"}\n        }\n      }\n    },\n    \\\"diagnostics\\\": {\n      \\\"type\\\":\\\"object\\\",\n      \\\"properties\\\": {\n        \\\"notes\\\": {\\\"type\\\":\\\"string\\\"}\n      }\n    }\n  }\n}\n\nUser query:\n\\\"{{$json.query}}\\\"\n\nDocuments (each has url, title, excerpt):\n\" + JSON.stringify($json.docs).slice(0, 100000) + \"\n\nInstructions:\n- Cite only from provided docs.\n- Prefer most recent and authoritative.\n- If conflicting, explain briefly in bullets.\n- Keep \\\"answer\\\" â‰¤ 120 words when ui.mode == \\\"concise\\\".\n- Never invent URLs or titles.\n- Output strict JSON only.\"}]}",
        "options": {}
      },
      "id": "413054ad-ea1a-4b22-bb67-74d261c83bed",
      "name": "Synthesis LLM",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1808,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "// Safety Pass\n\nlet result = $json;\n\n// Check if topic is medical/legal/financial and add disclaimer\nconst query = result.query || '';\nconst answer = result.answer || '';\n\nconst sensitiveTopics = ['medical', 'legal', 'financial', 'health', 'law', 'finance', 'medicine'];\nconst isSensitive = sensitiveTopics.some(topic => \n  query.toLowerCase().includes(topic) || answer.toLowerCase().includes(topic)\n);\n\nif (isSensitive) {\n  result.answer += ' Note: This is not professional advice.';\n}\n\n// Ensure we're returning valid JSON\nreturn [{ json: result }];"
      },
      "id": "06b9605c-d20d-4cf3-8b9d-2ce31debb727",
      "name": "Safety Pass",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2000,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "// Persist & Cache\n\n// This would normally connect to Redis and Postgres\n// For now, we'll just pass through the data\n\nreturn [{ json: $json }];"
      },
      "id": "e9529498-0e42-4aad-8263-be6c2ea4b12a",
      "name": "Persist & Cache",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2208,
        0
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "options": {
          "responseCode": 200
        }
      },
      "id": "1f6cac85-94bb-4fda-8281-19482a70ef22",
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2400,
        0
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "tavilyApiKey",
              "value": "={{$env.TAVILY_API_KEY}}"
            },
            {
              "name": "firecrawlApiKey",
              "value": "={{$env.FIRECRAWL_API_KEY}}"
            },
            {
              "name": "openrouterApiKey",
              "value": "={{$env.OPENROUTER_API_KEY}}"
            },
            {
              "name": "openrouterModel",
              "value": "={{$env.OPENROUTER_MODEL}}"
            },
            {
              "name": "ollamaHost",
              "value": "={{$env.OLLAMA_HOST}}"
            },
            {
              "name": "ollamaModel",
              "value": "={{$env.OLLAMA_MODEL}}"
            },
            {
              "name": "redisHost",
              "value": "={{$env.REDIS_HOST}}"
            },
            {
              "name": "redisPort",
              "value": "={{$env.REDIS_PORT}}"
            }
          ]
        },
        "options": {}
      },
      "id": "48b90ef0-9852-4d36-9416-0150f5d5b495",
      "name": "Set Env Vars",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        128,
        336
      ]
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -16,
        -208
      ],
      "id": "5dd88b0d-aa31-443b-ace4-fb942c128807",
      "name": "When clicking 'Execute workflow'"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Validate & Defaults",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate & Defaults": {
      "main": [
        [
          {
            "node": "Cache Lookup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache Lookup": {
      "main": [
        [
          {
            "node": "Query Normalizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Normalizer": {
      "main": [
        [
          {
            "node": "Search API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search API": {
      "main": [
        [
          {
            "node": "Rank & Deduplicate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rank & Deduplicate": {
      "main": [
        [
          {
            "node": "Fetch & Extract Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch & Extract Content": {
      "main": [
        [
          {
            "node": "Clean & Trim",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean & Trim": {
      "main": [
        [
          {
            "node": "Compose Synthesis Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compose Synthesis Prompt": {
      "main": [
        [
          {
            "node": "Synthesis LLM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Synthesis LLM": {
      "main": [
        [
          {
            "node": "Safety Pass",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Safety Pass": {
      "main": [
        [
          {
            "node": "Persist & Cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Persist & Cache": {
      "main": [
        [
          {
            "node": "Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking 'Execute workflow'": {
      "main": [
        [
          {
            "node": "Validate & Defaults",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5cd0de91-7245-4852-b325-03706d54fb3c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ed10a9b46c8c1194343b1f0a49cc4244737dee3b8e9936cc3b3b88e4eb818467"
  },
  "id": "lIcAoIOxt6cRbEV6",
  "tags": []
}